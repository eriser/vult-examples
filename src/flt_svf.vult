

fun calc_g(cv) @[table(size=32, min=-0.3, max=0.7)]{
   val pitch = cv * 120.0 + 48.0;
   val f = 8.175798915643707*exp(0.057762265046662105*pitch);
   val pi = 3.141592653589793;
   val wd = 2.0*pi*f;
	val T  = 1.0/44100.0;
	val wa = (2.0/T)*tan(wd*T/2.0);
	val g  = wa*T/2.0;
   return g;
}

fun flt_svf(x,cv,q,sel:int) {
   mem z1, z2;
   mem g, fix_q,inv_den;

   if(Util.change(cv) || Util.change(q)) {
      g = calc_g(cv);
      fix_q = 1.0 - q;
      inv_den = 1.0/(1.0 + 2.0*fix_q*g + g*g);
   }

   val high  = (x - (2.0*fix_q + g)*z1 - z2) * inv_den;
	val band  = g*high + z1;
	val low   = g*band + z2;
   val notch = low + high;

	z1 = Util.soft_saturate(g*high + band);
	z2 = Util.soft_saturate(g*band + low);

   val output =
      if sel == 0 then low else
      if sel == 1 then high else
      if sel == 2 then band else
      notch;
   return output;
}
and init() @[init] {
   g = calc_g(0.0);
   inv_den = 1.0/(1.0 + 2.0*0.0*g + g*g);
}

fun process(input,cv,q,sel) {
   return flt_svf(input,cv,q,sel);
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }