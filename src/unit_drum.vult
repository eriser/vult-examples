
fun unit_drum(gate, odecay, start, end, rate, nlevel, color, ndecay) {
   // Envelope of the drum
   val osc_env, env_reset = Env_drum.env_drum(gate, 0.005,odecay+0.01);
   // Change of pitch
   val cv = Env_swept.env_swept(gate, start, end, rate);

   // Main triangle oscillator
   // Note: the oscillator is dissabled while the nevelop resets
   val osc = Osc_tricore.tricore(cv, 0.0, env_reset);
   // Saturates the triangle to get a sine with some harmonics
   val osc_sat = Util.saturate(1.5 *  osc);

   // Envelope of the noise
   //val noise_env = Env_ad.env_ad(gate, 0.01,ndecay+0.01);
   //val noise = Osc_noisef.osc_noisef(color> 0.5);
   //return 2.0*osc_sat * osc_env + nlevel * noise * noise_env;
   return osc_env * osc_sat;
}


fun process(gate) {
   mem odecay, start, end, rate, nlevel, color, ndecay;
   return unit_drum(gate, odecay, start, end, rate, nlevel, color,ndecay);
}

and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int) {
   if(control == 30) odecay = real(value)/127.0;
   if(control == 31) start = Util.map(real(value), 0.0, 127.0, -0.2, 0.3);
   if(control == 32) end = Util.map(real(value), 0.0, 127.0, -0.2, 0.3);
   if(control == 33) rate = real(value)/127.0;
   if(control == 34) nlevel = real(value)/127.0;
   if(control == 35) color = real(value)/127.0;
   if(control == 36) ndecay = real(value)/127.0;
}
and default(){ }