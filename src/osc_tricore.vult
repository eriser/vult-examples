/*
Produces an unipolar aliased saw wave.

Internally the ramp goes from 0 to 2^14 in order to get better precision
when using fixed point.

*/

fun tricore(cv:real, reset:real) : real {
   mem rate;
   mem reset_state;
   mem phase, reset_phase;
   mem direction;
   val out = 0.0;
   // Calculate the rate only when the cv changes
   if(Util.change(cv)) {
      rate = 4.0 * Util.cvToRate(cv);
   }
   // Determine the next value
   val new_phase = phase + if direction then rate else -rate;

   // if reset was triggered enter reset state
   if(Util.edge(reset > 0.0)) {
      // this is gonna be the initial value from which the oscillator starts resetting
      reset_phase = phase;
      // enter the reset state
      reset_state = true;
      new_phase = 0.0;
   }

   if(new_phase > 1024.0) {
      new_phase = 1024.0 - (new_phase - 1024.0);
      direction = false;
   }
   else if(new_phase < -1024.0) {
      direction = true;
      new_phase = -1024.0 + (new_phase + 1024.0);
   }
   // update the phase
   phase = new_phase;

   if(reset_state) {
      // exponentially reduce the value until is small enough to matter
      if(abs(reset_phase) > 10.0) {
         reset_phase = reset_phase - reset_phase * 0.5;
      }
      else {
         reset_phase = 0.0;
         reset_state = false;
      }
      out = reset_phase;
   }
   // the output is the sum of the ideal saw wave and the reset transition
   out = out + phase;
   return out / 1024.0;
}
and init()@[init] {
   rate = Util.cvToRate(0.0);
}

fun process(cv, reset) {
   return tricore(cv, reset);
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }