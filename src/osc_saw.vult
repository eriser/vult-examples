
// Efficient polynomial transition regions
fun eptr(cv){
   mem rate, phase;
   val y = 0.0;
   if(Util.change(cv)) {
      rate = Util.cvToRate_unit(cv);
   }
   phase = phase + rate * 2.0;
   if(phase > 1.0 - rate) {
      y = phase - (phase / rate) + (1.0 / rate) - 1.0;
      phase = phase - 2.0;
   }
   else
      y = phase;
   return y;
}
and eptr_start() @[init] {
   mem rate = Util.cvToRate_unit(0.0);
}

// Polynomial transition regions (W=2)
fun dpt_w2(cv:real){
   mem rate, phase;
    if(Util.change(cv)) {
        rate = Util.cvToRate_unit(cv);
    }
    val out;
    val s1 = rate;
    val s2 = s1 + rate;

    phase = phase + rate;
    phase = if phase > 1.0 then phase - 1.0 else phase;

    if(phase < s1) {
      val d = phase / rate;
      out = 1.0 + d * (-d + s2);
    }
    else if (phase < s2) {
      val d = phase / rate;
      out = 3.0 + d * (-4.0 + d + s2);
    }
    else {
      out = 2.0 * phase - 1.0;
    }
    return out;
}
and dpt_w2_start() @[init] {
   mem rate = Util.cvToRate_unit(0.0);
}

// Polynomial transition regions (W=1)
fun dpt_w1(cv:real){
   mem rate, phase;
    if(Util.change(cv)) {
        rate = Util.cvToRate_unit(cv);
    }
    val out;
    val s1 = rate;
    val dc = - 1.0;
    phase = phase + rate;
    phase = if phase > 1.0 then phase - 1.0 else phase;
    if(phase < s1) {
      val d = phase / rate;
      out = -2.0 * d + 2.0 + dc;
    }
    else {
      out = 2.0 * phase - 1.0;
    }
    return out;
}
and dpt_w1_start() @[init] {
   mem rate = Util.cvToRate_unit(0.0);
}

fun osc_saw_simple(cv) {
   mem inc;
   if(Util.change(cv))
      inc = Util.cvToRate_unit(cv);
   val i = if inc < eps() then eps() else inc;
   // generate a ramp from -1.0  to 1.0
   mem phase = (2.0*inc + phase) % 2.0;
   val ph = phase - 1.0;
   val o = 0.0;
   // soften the transitions
   if(ph >= 1.0 - i) {
      val b = (1.0 - i - ph)/i;
      o = b * abs(b) + ph;
   }
   else if(ph <= i - 1.0) {
      val b = (i - 1.0 - ph)/i;
      o = b * abs(b) + ph;
   }
   else {
      o = ph;
   }
   return o;
}
and init()@[init]{
   inc = Util.cvToRate_unit(0.0);
}

fun process(cv) {
   return dpt_w2(cv);
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }