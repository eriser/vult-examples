
fun osc_triangle(cv, reset) {
   mem phase;
   mem rate;
   if(Util.change(cv))
      rate = Util.cvToRate(cv);
   if(Util.edge(reset > 0.0))
      phase = 0.0;
   phase = (phase + 2.0 * rate) % 2.0;
   val x = if phase > 1.0 then 2.0 - phase else phase;
   return 2.0 * x - 1.0;
}

fun process(cv, reset) {
   return osc_triangle(cv, reset);
}

and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }