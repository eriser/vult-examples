
// Returns true if the input value is near zero (< 1e-2)
fun near_zero(x) : bool return abs(x)<1e-9;

fun change(x):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun dcblock(x0){
  mem x1,y1;
  val y0 = x0-x1+y1*0.995;
  x1,y1 = x0,y0;
  return y0;
}

// Converts the MIDI note to increment rate at a 44100 sample rate
fun pitchToRate(d) : real
  return 8.175798915643707*exp(0.057762265046662105*d)/44100.0;

fun cvToRate(cv) {
   return pitchToRate(cv * 12.0 + 48.0);
}

// Generates a BW-limited pulse train given the phase and the number of harmonics
fun pulse_train(m,phase){
  val pi_phase = phase * 3.141592653589793;
  val denominator1 = sin(pi_phase);
  val tmp1 = 0.;
  if(near_zero(denominator1)) {
    tmp1 = 1.;
  }
  else {
    tmp1 = sin(m * pi_phase);
    tmp1 =  tmp1 / (m * denominator1);
  }
  return tmp1;
}

// Generates BW-limited waveforms using the blit algorithm.
// It can generate PWM puses, saws and triangles.
fun osc_blit(cv,pw,wave){
  mem m;
  mem rate;
  mem phase;
  mem state_triang;
  mem state_pulse;
  mem state_saw;
  mem output;

  val fixed_cv = 0.;
  if(wave < 2.) {
    fixed_cv = cv;
  }
  else {
    fixed_cv = cv + 1.;
  }
  // Updates the parameters if the cv changed
  if(change(fixed_cv)) {
    rate = cvToRate(fixed_cv);
    val p = 1. / rate;
    val maxHarmonics = floor(p/2.);
    m = 2. * maxHarmonics + 1.;
  }
  // Generates a shifted version of the phase
  val shift05 = 0.5 + pw * 0.49;
  val shift = phase + shift05;
  if(shift > 1.) {
    shift = shift - 1.;
  }
  // Generates the first pulse train
  val tmp1 = pulse_train(m,phase);
  // Generates the second pulse train
  val tmp2 = pulse_train(m,shift);
  // Updates the phase
  phase = phase + rate;
  if(phase > 1.) {
    phase = phase - 1.;
  }

  // Calculates the waveforms based on the pulse trains
  state_pulse  = clip(state_pulse  * 0.9995 + tmp1 - tmp2, -1., 1.);
  state_saw    = clip(state_saw    * 0.9995 + (tmp1 + tmp2  - 2. * rate)/shift05/2., -1.,1.);
  state_triang = clip(state_triang * 0.9995 + 2. * state_pulse * rate, -1.,1.);

  // Select the wave to output
  if(wave < 1.) {
    output = state_pulse;
  }
  else if(wave < 2.) {
    output = 2. * state_saw;
  }
  else {
    output = 2. * state_triang*(1. + pw);
  }

  output = dcblock(output);
  return clip(output,-1.,1.);
}
and init()@[init]{
  rate = cvToRate(0.0);
  val p = 1. / rate;
  val maxHarmonics = floor(p/2.);
  m = 2. * maxHarmonics + 1.;
}

fun process(cv, pw, wave) {
   return osc_blit(cv, pw, wave);
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }